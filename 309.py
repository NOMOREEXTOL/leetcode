class Solution():
    def maxProfit(self,prices):
        """买卖股票的最大利润，含冷冻期,本题含有冷冻期，故要对状态进行拆分，而且对于不持有的状态要细分成未持有股票的状态以及当天卖出
        股票的状态，因为冷冻期具体在哪一天，要取决于哪一天卖出的股票,version1:28ms,13.8MB"""
        dp = [[0,0,0,0] for _ in range(len(prices))] #dp数组的含义如下:dp[i][0]表示持有股票状态下的最大利润
        #dp[i][1] 表示第i天不持有股票的最大利润（不包含当天卖出股票）
        #dp[i][2] 表示第i天卖出股票的最大利润
        #dp[i][3] 表示第i天是冷冻期的最大利润

        #递推公式：dp[i][0] = max(dp[i-1][0],dp[i-1][1] - prices[i],dp[i-1][3] - prices[i]) 保持持有或者，在前一天是不持有的情况下买入,或者前一天是冷冻期的时候购入
        #           dp[i][1] = max(dp[i-1][1],dp[i-1][3]) 保持，或者可由前一天是冷冻期的状态推导出来
        #           dp[i][2] = dp[i-1][0] + prices[i]        这个最大利润就等于前一天持有股票，第二天卖了
        #           dp[i][3] = dp[i-1][2]            冷却期的前一天一定是刚卖出股票的一天，由此可以状态转移
        # 如果不能理解的话，可以画个图：[买入，卖出，冷却期，买入，卖出，冷却期，不持有，不持有，买入] 从这可以看出每一种情况，分别可以由哪几种情况推到而来


        #初始化
        dp[0][0] = -prices[0] #dp[0][1~3]都是0，因为从dp数组的实际意义考虑，这几个值都是无效的，所以具体初始化的值应该根据递推公式的合理性来取值

        for i in range(1,len(prices)):
            dp[i][0] = max(dp[i-1][0],dp[i-1][1] - prices[i],dp[i-1][3] - prices[i])
            dp[i][1] = max(dp[i-1][1],dp[i-1][3])
            dp[i][2] = dp[i-1][0] + prices[i]
            dp[i][3] = dp[i-1][2]
        return max(dp[-1][1],dp[-1][2],dp[-1][3])   #最终结果应该返回这三种情况的最大值，分别对应的状态为，早在最后一天之前就卖了，刚好在最后一天之前卖以及就在最后一天卖

    def maxProfit(self,prices):
        """滚动数组优化，version2：20ms，13.5MB"""
        dp = [0, 0, 0, 0]

        dp[0] = -prices[0]
        for i in range(1, len(prices)):
            temp1 = dp[0]  #因为求dp[2]的时候要用的是前一天的dp[0]，而dp[0]在计算dp[2]之前就会被更新，所以需要一个临时变量保存上一个的dp[0]值
            dp[0] = max(dp[0], dp[1] - prices[i], dp[3] - prices[i])
            dp[1] = max(dp[1], dp[3])
            dp[3] = dp[2]
            dp[2] = temp1 + prices[i]

        return max(dp[1], dp[2], dp[3])  # 最终结果应该返回这三种情况的最大值，分别对应的状态为，早在最后一天之前就卖了，刚好在最后一天之前卖以及就在最后一天卖



if __name__ == "__main__":
    s = Solution()
    prices = [1,2,3,0,2]
    print(s.maxProfit(prices)) #3


